@inject IJSRuntime JsRuntime
@implements IDisposable
@inject MahwousRepositories repositories


<div class="container">
    <div class="card my-3">

        <div class="card-body">
            <div class="card-columns">
                @foreach (var quote in quotes)
                {
                    <div class="card">
                        <div class="card-body">
                            <p class="card-text">
                                @quote.Content
                            </p>
                        </div>
                        <AuthorizeView>
                            <Authorized>
                                <div class="card-footer">
                                    <div class="stats">
                                        <a class="btn btn-info" href="administration/quotes/edit/@quote.Id">تعديل</a>
                                    </div>
                                </div>
                            </Authorized>
                        </AuthorizeView>
                    </div>
                }
            </div>
        </div>

        <div class="card-footer">
            <div id="list-end">
                @if (IsLoading)
                {
                    <div class="d-flex justify-content-center">
                        <p><i class="fas fa-spin fa-spinner"></i> جاري تحميل البيانات </p>
                    </div>
                }
                @if (StopLoading)
                {
                    <div>
                        <h4>إنتهى تحميل البيانات</h4>
                    </div>
                }
            </div>
        </div>

    </div>
</div>





@code {

    List<QuoteStatus> quotes { get; set; } = new List<QuoteStatus>();

    private int totalAmountPages;


    private QuoteFilter quoteFilter = new QuoteFilter();
    private PaginationDetails Pagination = new PaginationDetails();


    bool IsLoading { get; set; } = false;

    bool StopLoading = false;





    protected async override Task OnInitializedAsync()
    {
        Pagination.PageSize = 25;
        //await authorizer.SetAuthorizationAsync();
        await LoadQuotes();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await InitJsListenerAsync();
    }


    protected async Task InitJsListenerAsync()
    {
        await JsRuntime.InvokeVoidAsync("ScrollList.Init", "list-end", DotNetObjectReference.Create(this));
    }


    async Task LoadQuotes()
    {
        if (IsLoading)
            return;


        IsLoading = true;
        StateHasChanged();

        try
        {
            var paginatedResponse = await repositories.QuotesRepository.GetFiltered(quoteFilter);
            quotes.AddRange(paginatedResponse.Response);
            totalAmountPages = paginatedResponse.TotalPages;
            Pagination.PageIndex++;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }

        IsLoading = false;
        StateHasChanged();

    }

    [JSInvokable]
    public async Task LoadMore()
    {
        if (Pagination.PageIndex <= totalAmountPages)
            await LoadQuotes();
        else
            await StopListener();
    }



    public async Task StopListener()
    {
        StopLoading = true;
        IsLoading = false;
        await JsRuntime.InvokeVoidAsync("ScrollList.RemoveListener");
        StateHasChanged();
    }


    public void Dispose()
    {
        JsRuntime.InvokeVoidAsync("ScrollList.RemoveListener");
    }

}