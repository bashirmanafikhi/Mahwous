@using System.IO
@inject IJSRuntime js

<EditForm Model="Post" OnValidSubmit="@OnDataAnnotationsValidated">

    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="Name">العنوان:</label>
        <div>
            <RadzenTextBox @bind-Value="Post.Title" Placeholder="عنوان المنشور" />
            <span class="text-danger"><ValidationMessage For="@(() => Post.Title)" /></span>
        </div>
    </div>


    <div class="form-group">
        <label for="Content">محتوى المنشور:</label><br />
        <RadzenTextArea Cols="30" Placeholder="اكتب المحتوى هنا..." @bind-Value="@Post.Content" />
        <span class="text-danger"><ValidationMessage For="@(() => Post.Content)" /></span>
    </div>

    <div class="form-group">
        <label>صورة</label>
        <InputFile OnChange="OnChooseFile" accept=".jpg,.jpeg,.png" />
        <span class="text-danger"></span>
    </div>
    @if (Post.ImagePath != null)
    {
        <div>
            <div style="margin:10px">
                <img src="@Post.ImagePath" style="width: 400px;" />
            </div>
        </div>
    }

    <div class="form-check">
        <input type="checkbox" class="form-check-input" id="Visible" @bind="Post.Visible" />
        <label class="form-check-label" for="Visible">مرئي</label>
        <span class="text-danger"><ValidationMessage For="@(() => Post.Visible)" /></span>
    </div>

    <br />


    <a href="administration/posts" class="btn btn-danger">
        رجوع
    </a>

    <button type="submit" class="btn btn-info">
        @ButtonText
    </button>

</EditForm>

@code {
    [Parameter] public Post Post { get; set; }
    [Parameter] public string ButtonText { get; set; } = "حفظ";
    [Parameter] public EventCallback<Stream> OnValidSubmit { get; set; }

    private async Task OnDataAnnotationsValidated()
    {
        if (imageFile == null && Post.ImagePath == null)
        {
            await js.DisplayMessage("خطء", "صورة المنشور مطلوبة", SweetAlertMessageType.error);
            return;
        }

        await OnValidSubmit.InvokeAsync(imageFile);
    }

    Stream imageFile;
    public async void OnChooseFile(InputFileChangeEventArgs e)
    {
        try
        {
            // Get the selected file
            var file = e.File;

            // Check if the file is null then return from the method
            if (file == null)
                return;

            // Validate the extension if requried (Client-Side)

            // Set the value of the stream by calling OpenReadStream and pass the maximum number of bytes allowed because by default it only allows 512KB
            // I used the value 2560000 which is about 2.5 MB
            using (var stream = file.OpenReadStream(2560000))
            {
                imageFile = stream;
                var fileName = file.Name;
            }
        }
        catch (Exception ex)
        {
            await js.DisplayMessage(ex.Message + "\n ملاحظة: حجم الصورة ما لازم يتجاوز ال2 ميغا ونص");
        }
    }
}