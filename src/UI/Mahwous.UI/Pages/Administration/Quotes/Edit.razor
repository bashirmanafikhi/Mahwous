@page "/administration/quotes/edit/{quoteId:int}"
@layout AdminLayout
@attribute [Authorize]
@inject MahwousRepositories repositories
@inject NavigationManager navigation
@using Mahwous.Service.ViewModels.QuoteStatuses


<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">تعديل الحالة الكتابية</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item active">تعديل الحالة</li>
                    <li class="breadcrumb-item"><a href="administration/quotes">الحالات الكتابية</a></li>
                    <li class="breadcrumb-item"><a href="administration">الإدارة</a></li>
                    <li class="breadcrumb-item"><a href="">الصفحة الرئيسية</a></li>
                </ol>
            </div>
        </div>
    </div>
</div>

<div class="content">
    <div class="container-fluid">


        @if (NotSelectedCategories != null)
        {
            @*<QuoteForm ButtonText="تعديل حالة" Quote="quote"
                       OnValidSubmit="EditQuote" NotSelectedCategories="NotSelectedCategories" SelectedCategories="SelectedCategories" />*@
        }

    </div>
</div>

@code {
    [Parameter] public int quoteId { get; set; }
    GetQuoteStatusDetailsResponse quote = new GetQuoteStatusDetailsResponse();

    protected override async Task OnInitializedAsync()
    {
        // to give tokens to api :)
        //await authorizer.SetAuthorizationAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        CategoryFilter filter = new CategoryFilter();
        filter.ForQuotes = true;
        var categories = await repositories.CategoriesRepository.List(filter);

        quote = await repositories.QuoteStatusRepository.GetDetails(quoteId);
        SelectedCategories = quote.Categories.Select(sc => sc).ToList();

        NotSelectedCategories = categories.Where(c =>
                !SelectedCategories
                .Select(c => c.Id)
                .Contains(c.Id)
            ).ToList();


    }

    async Task EditQuote()
    {
        try
        {
            UpdateQuoteStatusCommand command = new UpdateQuoteStatusCommand
            {
                Id = quote.Id,
                Content = quote.Content
            };
            await repositories.QuoteStatusRepository.Update(command);

            navigation.NavigateTo("administration/quotes");

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }




    private List<Category> NotSelectedCategories;

    private List<Category> SelectedCategories;
}
