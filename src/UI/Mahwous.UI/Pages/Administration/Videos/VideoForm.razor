@using System.IO
@inject IJSRuntime js


<EditForm Model="Video" OnValidSubmit="OnDataAnnotationsValidated">

    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="Title">عنوان الفيديو:</label>
        <div>

            <InputText @bind-Value="Video.Title" />
            <span class="text-danger"><ValidationMessage For="@(() => Video.Title)" /></span>
        </div>
    </div>

    <div class="form-group">
        <label>صورة الغلاف</label>
        <InputFile OnChange="OnChooseCover" accept=".jpg,.jpeg,.png" />
        <span class="text-danger"></span>
    </div>
    @if (Video.CoverPath != null)
    {
        <div>
            <div style="margin:10px">
                <img src="@Video.CoverPath" style="width: 400px;" />
            </div>
        </div>
    }

    <div class="form-group">
        <label>الفيديو</label>
        <InputFile OnChange="OnChooseVideo" accept="video/mp4,video/x-m4v,video/*" />
        <span class="text-danger"></span>
    </div>





    <div class="form-group">
        <label for="Categories">التصنيفات:</label>
        <div>
            <MultipleSelector Selected="Selected" NoSelected="NotSelected"></MultipleSelector>
        </div>
    </div>


    <div class="form-check">
        <input type="checkbox" class="form-check-input" id="Visible" @bind="Video.IsHidden" />
        <label class="form-check-label" for="Visible">مرئي</label>
    </div>

    <br />
    @if (isWaiting)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
        <br />
    }


    <a href="administration/videos" class="btn btn-danger">
        رجوع
    </a>

    <button type="submit" class="btn btn-info">
        @ButtonText
    </button>

    <br />
</EditForm>

@code {

    [Parameter] public VideoStatus Video { get; set; }
    [Parameter] public string ButtonText { get; set; } = "حفظ الفيديو";
    [Parameter] public EventCallback<(Stream, Stream)> OnValidSubmit { get; set; }



    [Parameter] public List<Category> SelectedCategories { get; set; } = new List<Category>();
    [Parameter] public List<Category> NotSelectedCategories { get; set; } = new List<Category>();


    private List<MultipleSelectorModel> Selected = new List<MultipleSelectorModel>();
    private List<MultipleSelectorModel> NotSelected = new List<MultipleSelectorModel>();
    bool isWaiting = false;



    protected override void OnInitialized()
    {
        //Video.CoverPath = null;
        //Video.VideoPath = null;
        Selected = SelectedCategories.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
        NotSelected = NotSelectedCategories.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
    }



    Stream imageFile;
    public async void OnChooseCover(InputFileChangeEventArgs e)
    {
        try
        {
            // Get the selected file
            var file = e.File;

            // Check if the file is null then return from the method
            if (file == null)
                return;

            // Validate the extension if requried (Client-Side)

            // Set the value of the stream by calling OpenReadStream and pass the maximum number of bytes allowed because by default it only allows 512KB
            // I used the value 2560000 which is about 2.5 MB
            using (var stream = file.OpenReadStream(2560000))
            {
                imageFile = stream;
                var fileName = file.Name;
            }
        }
        catch (Exception ex)
        {
            await js.DisplayMessage(ex.Message + "\n ملاحظة: حجم الصورة ما لازم يتجاوز ال2 ميغا ونص");
        }
    }

    Stream videoFile;
    public async void OnChooseVideo(InputFileChangeEventArgs e)
    {
        try
        {
            // Get the selected file
            var file = e.File;

            // Check if the file is null then return from the method
            if (file == null)
                return;

            // Validate the extension if requried (Client-Side)

            // Set the value of the stream by calling OpenReadStream and pass the maximum number of bytes allowed because by default it only allows 512KB
            // I used the value 5120000 which is about 5 MB
            using (var stream = file.OpenReadStream(5120000))
            {
                videoFile = stream;
                var fileName = file.Name;
            }
        }
        catch (Exception ex)
        {
            await js.DisplayMessage(ex.Message + "\n ملاحظة: حجم الصورة ما لازم يتجاوز ال5 ميغا ");
        }
    }


    private async Task OnDataAnnotationsValidated()
    {
        isWaiting = true;
        StateHasChanged();

        if (imageFile == null && Video.CoverPath == null)
        {
            await js.DisplayMessage("خطء", "صورة الغلاف مطلوبة", SweetAlertMessageType.error);
            return;
        }

        if (videoFile == null && Video.VideoPath == null)
        {
            await js.DisplayMessage("خطء", "ملف الفيديو مطلوب", SweetAlertMessageType.error);
            return;
        }

        Video.Categories = Selected.Select(x => new Category { Id = int.Parse(x.Key) }).ToList();

        await OnValidSubmit.InvokeAsync((imageFile, videoFile));
    }


}