
@page "/administration/notifications"
@layout AdminLayout
@attribute [Authorize]

@inject IJSRuntime js
@inject NavigationManager navigation
@*@inject MahwousRepositories repositories*@
@*@inject HttpAuthorizer authorizer*@
@inject MahwousRepositories repositories
@inject MahwousRepositories repositories

<ol class="breadcrumb mb-4">
    <li class="breadcrumb-item"><a href="">الصفحة الرئيسية</a></li>
    <li class="breadcrumb-item"><a href="administration">الإدارة</a></li>
    <li class="breadcrumb-item active">الإشعارات</li>
</ol>


<div class="container">
    <div class="row">

        <div class="col-lg-9">

            <div class="card">
                <div class="card-header">
                    <Pagination CurrentPage="@Pagination.PageIndex" TotalAmountPages="totalAmountPages"
                                SelectedPage="SelectedPage" />
                </div>

                <div class="card-body">

                    <div>

                        @if (notifications == null)
                        {
                            <p>جاري تحميل الإشعارات...</p>
                        }
                        else if (notifications.Count == 0)
                        {
                            <p> لا يوجد اشعارات! </p>
                        }
                        else
                        {

                            <table class="table">
                                <thead class="thead-dark">
                                    <tr>
                                        <th scope="col">العنوان</th>
                                        <th scope="col">مرات الإستقبال</th>
                                        <th scope="col">مرات الفتح</th>
                                        <th scope="col">مهام أخرى</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var notification in notifications)
                                    {
                                        <tr>
                                            <th scope="row">@notification.Title</th>
                                            <td>@notification.RecivedCount</td>
                                            <td>@notification.OpenedCount</td>
                                            <td>
                                                <button class="btn btn-danger" @onclick="@(() => DeleteNotification(notification.Id))">حذف</button>
                                                <a class="btn btn-info" href="administration/notifications/edit/@notification.Id">تعديل</a>
                                            </td>
                                        </tr>
                                    }

                                </tbody>
                            </table>

                        }
                    </div>

                </div>

                <div class="card-footer">
                    <Pagination CurrentPage="@Pagination.PageIndex" TotalAmountPages="totalAmountPages"
                                SelectedPage="SelectedPage" />
                </div>
            </div>

        </div>


        <div class="col-lg-3">
            <a href="administration/notifications/create" class="btn btn-primary btn-block mb-3">اضافة اشعار جديد</a>
        </div>
    </div>
</div>




@code {

    ICollection<MobileNotification> notifications { get; set; }

    MobileNotificationFilter filter = new MobileNotificationFilter();
    private PaginationDetails Pagination = new PaginationDetails();
    private EntitySortType sortType = EntitySortType.Random;

    int totalAmountPages;


    protected async override Task OnInitializedAsync()
    {
        //await authorizer.SetAuthorizationAsync();
        await LoadNotifications();
    }
    async Task LoadNotifications()
    {
        try
        {
            var paginatedResponse = await repositories.NotificationsRepository.GetFiltered(filter);
            notifications = paginatedResponse.Response;
            totalAmountPages = paginatedResponse.TotalPages;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }
    async Task DeleteNotification(int notificationId)
    {
        var notification = notifications.First(x =>
x.Id == notificationId);
        if (await js.Confirm("تأكيد", $"هل أنت متأكد أنك تريد أن تحذف {notification.Title} ؟", SweetAlertMessageType.error))
        {
            await repositories.NotificationsRepository.Delete(notificationId);
            await LoadNotifications();
        }
    }

    private async Task SelectedPage(int page)
    {
        Pagination.PageIndex = page;
        await LoadNotifications();
    }
}


