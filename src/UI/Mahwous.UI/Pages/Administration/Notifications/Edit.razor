@page "/administration/notifications/edit/{notificationId:int}"
@layout AdminLayout
@attribute [Authorize]
@inject MahwousRepositories repositories
@inject NavigationManager navigation
@using Mahwous.Service.ViewModels.MobileNotifications

<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">تعديل الإشعار</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item active">تعديل الإشعار</li>
                    <li class="breadcrumb-item"><a href="administration/notifications">الإشعارات</a></li>
                    <li class="breadcrumb-item"><a href="administration">الإدارة</a></li>
                    <li class="breadcrumb-item"><a href="">الصفحة الرئيسية</a></li>
                </ol>
            </div>
        </div>
    </div>
</div>

<div class="content">
    <div class="container-fluid">


        <NotificationForm ButtonText="تعديل الإشعار" Notification="notification" OnValidSubmit="@EditNotification" />

    </div>
</div>

@code {
    [Parameter] public int notificationId { get; set; }
    MobileNotification notification = new MobileNotification();

    protected override async Task OnInitializedAsync()
    {
        // to give tokens to api :)
        //await authorizer.SetAuthorizationAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        notification = await repositories.MobileNotificationsRepository.GetDetails(notificationId);
    }

    async Task EditNotification()
    {
        try
        {
            // Todo complete properties
            UpdateMobileNotificationCommand command = new UpdateMobileNotificationCommand
            {
                Id = notification.Id,
                Title = notification.Title,
                Apps = notification.Apps.ToList(),
                BadgeNumber = notification.BadgeNumber,
                Description = notification.Description,
                IsScheduled = notification.IsScheduled,
                NotifyTime = notification.NotifyTime,
                ReturningData = notification.ReturningData
            };
            await repositories.MobileNotificationsRepository.Update(command);
            navigation.NavigateTo("administration/notifications");

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }
}
