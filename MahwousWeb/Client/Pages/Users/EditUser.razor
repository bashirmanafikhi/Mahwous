@page "/users/edit/{userId}"
@inject IUsersRepository usersRepository
@attribute [Authorize(Roles = "مدير")]
@inject IJSRuntime js
@layout AdminLayout


<div class="container pt-5">
    <h3>تعديل المستخدم</h3>

    <div class="form-inline">
        <select class="form-control mb-2 mr-sm-2" @bind="selectedRole">
            <option value="0">--Select a role--</option>

            @foreach (var role in roles)
            {
                <option value="@role.RoleName">@role.RoleName</option>
            }
        </select>

        <button class="btn btn-info mb-2 mr-sm-2" @onclick="AssignRole">منح الدور</button>
        <button class="btn btn-danger mb-2 mr-sm-2" @onclick="RemoveRole">إلغاء الدور</button>
    </div>
</div>

@code {
    [Parameter] public string UserId { get; set; }
    private List<RoleDTO> roles = new List<RoleDTO>();
    private string selectedRole = "0";

    protected override async Task OnInitializedAsync()
    {
        roles = await usersRepository.GetRoles();
    }

    private async Task AssignRole()
    {
        if (selectedRole == "0")
        {
            await js.DisplayMessage("يجب عليك إختيار دور أولاً");
            return;
        }

        await usersRepository.AssignRole(new EditRoleDTO() { RoleName = selectedRole, UserId = UserId });
        await js.DisplayMessage("تم منح الدور إلى المستخدم");
    }

    private async Task RemoveRole()
    {
        if (selectedRole == "0")
        {
            await js.DisplayMessage("يجب عليك إختيار دور أولاً");
            return;
        }

        await usersRepository.RemoveRole(new EditRoleDTO() { RoleName = selectedRole, UserId = UserId });
        await js.DisplayMessage("تم إخراج المستخدم من هذا الدور");
    }

}