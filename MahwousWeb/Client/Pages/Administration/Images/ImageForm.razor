@using System.IO

@inject IJSRuntime js


    <EditForm Model="Image" OnValidSubmit="OnDataAnnotationsValidated">

        <DataAnnotationsValidator />


        <div class="form-group">
            <InputImage Label="صورة" OnSelectedImage="PictureSelected" ImageURL="@imageURL" />
            <span class="text-danger"><ValidationMessage For="@(() => Image.ImagePath)" /></span>
</div>




        <div class="form-group">
            <label for="Categories">التصنيفات:</label>
            <div>
                <MultipleSelector Selected="Selected" NoSelected="NotSelected"></MultipleSelector>
            </div>
        </div>



        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="Visible" @bind="Image.Visible" />
            <label class="form-check-label" for="Visible">مرئي</label>
        </div>

        <br />

        <a href="administration/images" class="btn btn-danger">
            رجوع
        </a>

        <button type="submit" class="btn btn-info">
            @ButtonText
        </button>

    </EditForm>

@code {

    [Parameter] public ImageStatus Image { get; set; }
    [Parameter] public string ButtonText { get; set; } = "حفظ الصورة";
    [Parameter] public EventCallback OnValidSubmit { get; set; }



    [Parameter] public List<Category> SelectedCategories { get; set; } = new List<Category>();
    [Parameter] public List<Category> NotSelectedCategories { get; set; } = new List<Category>();

    private string imageURL;


    private List<MultipleSelectorModel> Selected = new List<MultipleSelectorModel>();
    private List<MultipleSelectorModel> NotSelected = new List<MultipleSelectorModel>();

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Image.ImagePath))
        {
            imageURL = Image.ImagePath;
            //Image.ImagePath = null;
        }

        Selected = SelectedCategories.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
        NotSelected = NotSelectedCategories.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
    }

    private void PictureSelected(string imageBase64)
    {
        Image.ImagePath = imageBase64;
        imageURL = null;
    }



    private async Task OnDataAnnotationsValidated()
    {
        //await js.DisplayMessage("Validated");


        Image.StatusCategories = Selected
        .Select(x => new StatusCategories { CategoryId = int.Parse(x.Key) }).ToList();

        if (!string.IsNullOrWhiteSpace(Image.ImagePath)) { imageURL = null; }


        await OnValidSubmit.InvokeAsync(null);
    }

}