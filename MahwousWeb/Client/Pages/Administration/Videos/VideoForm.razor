@using System.IO


<EditForm Model="Video" OnValidSubmit="OnDataAnnotationsValidated">

    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="Title">عنوان الفيديو:</label>
        <div>

            <InputText @bind-Value="Video.Title" />
            <span class="text-danger"><ValidationMessage For="@(() => Video.Title)" /></span>
</div>
    </div>

    <div class="form-group">
        <InputImage Label="صورة الغلاف" OnSelectedImage="PictureSelected" />
        <span class="text-danger"><ValidationMessage For="@(() => Video.CoverPath)" /></span>
</div>

    <div class="form-group">
        <InputVideo Label="الفيديو" OnSelectedVideo="VideoSelected" />
        <span class="text-danger"><ValidationMessage For="@(() => Video.VideoPath)" /></span>
    </div>





    <div class="form-group">
        <label for="Categories">التصنيفات:</label>
        <div>
            <MultipleSelector Selected="Selected" NoSelected="NotSelected"></MultipleSelector>
        </div>
    </div>


    <div class="form-check">
        <input type="checkbox" class="form-check-input" id="Visible" @bind="Video.Visible" />
        <label class="form-check-label" for="Visible">مرئي</label>
    </div>

    <br />
    @if (isWaiting)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
        <br />
    }


    <a href="administration/videos" class="btn btn-danger">
        رجوع
    </a>

    <button type="submit" class="btn btn-info">
        @ButtonText
    </button>

    <br />
</EditForm>

@code {

    [Parameter] public VideoStatus Video { get; set; }
    [Parameter] public string ButtonText { get; set; } = "حفظ الفيديو";
    [Parameter] public EventCallback OnValidSubmit { get; set; }



    [Parameter] public List<Category> SelectedCategories { get; set; } = new List<Category>();
    [Parameter] public List<Category> NotSelectedCategories { get; set; } = new List<Category>();


    private List<MultipleSelectorModel> Selected = new List<MultipleSelectorModel>();
    private List<MultipleSelectorModel> NotSelected = new List<MultipleSelectorModel>();
    bool isWaiting = false;



    protected override void OnInitialized()
    {
        //Video.CoverPath = null;
        //Video.VideoPath = null;
        Selected = SelectedCategories.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
        NotSelected = NotSelectedCategories.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
    }

    private void PictureSelected(string imageBase64)
    {
        Video.CoverPath = imageBase64;
    }

    private void VideoSelected(string videoBase64)
    {
        Video.VideoPath = videoBase64;
    }



    private async Task OnDataAnnotationsValidated()
    {
        isWaiting = true;
        StateHasChanged();


        Video.StatusCategories = Selected.Select(x => new StatusCategories { CategoryId = int.Parse(x.Key) }).ToList();



        await OnValidSubmit.InvokeAsync(null);
    }


}