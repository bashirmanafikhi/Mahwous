@page "/administration/videos/edit/{videoId:int}"
@layout AdminLayout
@attribute [Authorize]

@inject HttpAuthorizer authorizer
@inject IVideoRepository videoRepository
@inject ICategoryRepository categoryRepository
@inject NavigationManager navigation

<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">تعديل الفيديو</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item active">تعديل فيديو</li>
                    <li class="breadcrumb-item"><a href="administration/videos">الفيديوهات</a></li>
                    <li class="breadcrumb-item"><a href="administration">الإدارة</a></li>
                    <li class="breadcrumb-item"><a href="">الصفحة الرئيسية</a></li>
                </ol>
            </div>
        </div>
    </div>
</div>

<div class="content">
    <div class="container-fluid">


    @if (NotSelectedCategories != null)
    {
        <VideoForm ButtonText="تعديل الفيديو" Video="video"
                   OnValidSubmit="@EditVideo" NotSelectedCategories="NotSelectedCategories" SelectedCategories="SelectedCategories" />
    }



    </div>
</div>

@code {
    [Parameter] public int videoId { get; set; }
    VideoStatus video = new VideoStatus();

    protected override async Task OnInitializedAsync()
    {
        // to give tokens to api :)
        await authorizer.SetAuthorizationAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        video = await videoRepository.Get(videoId);

        SelectedCategories = video.StatusCategories.Select(sc => sc.Category).ToList();
        var categories = (await categoryRepository.GetCategoriesFiltered(
            new CategoryFilter() { ForVideos = true, RecordsPerPage = 100 }
            )).Response;

        NotSelectedCategories = categories.Where(c =>
                !SelectedCategories
                .Select(c => c.Id)
                .Contains(c.Id)
            ).ToList();
    }

    async Task EditVideo()
    {
        try
        {
            await videoRepository.Update(video);
            navigation.NavigateTo("administration/videos");

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }




    private List<Category> NotSelectedCategories;

    private List<Category> SelectedCategories;
}
