@using System.IO
@inject IFileReaderService fileReaderService
@using Blazor.FileReader

<div>
    <label>@Label</label>
    <div>
        <input type="file" @ref="inputElement" @onchange="VideoFileSelected" accept="video/mp4,video/x-m4v,video/*" />
    </div>
</div>
<div>
    @if (videoBase64 != null)
    {
            <div style="margin:10px">
                <video src="data:video/webm;base64, @videoBase64" style="width: 400px;" controls />
            </div>
    }

    @if (isConverting)
	{
		 <p class="info text-bold"> Converting.. </p>
	}

</div>

@code {
    [Parameter] public string Label { get; set; } = "Video";
    [Parameter] public EventCallback<string> OnSelectedVideo { get; set; }
    bool isConverting = false;

    private string videoBase64;
    ElementReference inputElement;

    async Task VideoFileSelected()
    {
        foreach (var file in await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync())
        {
            using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(4 * 1024))
            {
                isConverting = true;
                StateHasChanged();

                var videoBytes = new byte[memoryStream.Length];
                memoryStream.Read(videoBytes, 0, (int)memoryStream.Length);
                videoBase64 = Convert.ToBase64String(videoBytes);
                await OnSelectedVideo.InvokeAsync(videoBase64);

                //isConverting = false;
                //StateHasChanged();

            }
        }
    }
}